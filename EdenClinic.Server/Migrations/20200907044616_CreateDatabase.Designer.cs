// <auto-generated />
using System;
using EdenClinic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EdenClinic.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200907044616_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EdenClinic.Models.Center", b =>
                {
                    b.Property<Guid>("CenterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CenterAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CenterID");

                    b.ToTable("Center");
                });

            modelBuilder.Entity("EdenClinic.Models.Clinic", b =>
                {
                    b.Property<Guid>("ClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("ClinicPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("SpecialistID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ClinicID");

                    b.HasIndex("CenterID");

                    b.HasIndex("SpecialistID");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("EdenClinic.Models.ClinicalHistory", b =>
                {
                    b.Property<Guid>("ClinicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReservationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ClinicalHistoryID");

                    b.HasIndex("ReservationID");

                    b.ToTable("ClinicalHistory");
                });

            modelBuilder.Entity("EdenClinic.Models.Diagnosis", b =>
                {
                    b.Property<Guid>("DiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosisID");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("EdenClinic.Models.Disease", b =>
                {
                    b.Property<Guid>("DiseaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("DiseaseCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiseaseCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("DiseaseDanger")
                        .HasColumnType("tinyint");

                    b.Property<string>("DiseaseName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("DiseaseID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DiseaseCategoryID");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("EdenClinic.Models.DiseaseCategory", b =>
                {
                    b.Property<Guid>("DiseaseCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DiseaseCategoryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("DiseaseCategoryID");

                    b.ToTable("DiseaseCategory");
                });

            modelBuilder.Entity("EdenClinic.Models.DoctorSetting", b =>
                {
                    b.Property<Guid>("DoctorSettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("DetectingInfoStartup")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PrintingDescription")
                        .HasColumnType("bit");

                    b.HasKey("DoctorSettingID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorSetting");
                });

            modelBuilder.Entity("EdenClinic.Models.Drug", b =>
                {
                    b.Property<Guid>("DrugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DrugCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DrugName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("DrugPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("DrugID");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalHistory", b =>
                {
                    b.Property<Guid>("MedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("MedicalDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("MedicalHistoryCaptionsCaptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("MedicalHistoryID");

                    b.HasIndex("MedicalHistoryCaptionsCaptionID");

                    b.ToTable("MedicalHistory");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalHistoryCaption", b =>
                {
                    b.Property<Guid>("CaptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaptionDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("CaptionID");

                    b.ToTable("MedicalHistoryCaption");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalProcedure", b =>
                {
                    b.Property<Guid>("MedicalProcedureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicalProcedureDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("MedicalProcedureID");

                    b.ToTable("MedicalProcedure");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalTest", b =>
                {
                    b.Property<Guid>("MedicalTestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("LabName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2")
                        .HasMaxLength(25);

                    b.Property<Guid?>("TestTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("MedicalTestID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TestTemplateID");

                    b.ToTable("MedicalTest");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalTestsDetail", b =>
                {
                    b.Property<Guid>("MedicalTestDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("MedicalTestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("TestTemplateDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestValue")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("MedicalTestDetailID");

                    b.HasIndex("MedicalTestID");

                    b.HasIndex("TestTemplateDetailID");

                    b.ToTable("MedicalTestsDetail");
                });

            modelBuilder.Entity("EdenClinic.Models.PatientInfo", b =>
                {
                    b.Property<Guid>("PatientInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("HasCar")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<short?>("PaitentKidsCount")
                        .HasColumnType("smallint");

                    b.Property<double?>("PatientHeight")
                        .HasColumnType("float");

                    b.Property<string>("PatientHobbys")
                        .HasColumnType("nvarchar(350)")
                        .HasMaxLength(350);

                    b.Property<string>("PatientIdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PatientJob")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("PatientWight")
                        .HasColumnType("float");

                    b.Property<Guid?>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PatientInfoID");

                    b.HasIndex("PersonID")
                        .IsUnique()
                        .HasFilter("[PersonID] IS NOT NULL");

                    b.ToTable("PatientInfo");
                });

            modelBuilder.Entity("EdenClinic.Models.PatientMedicalHistory", b =>
                {
                    b.Property<Guid>("PatientMedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsYes")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicalHistoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("YesDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PatientMedicalHistoryID");

                    b.HasIndex("MedicalHistoryID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientMedicalHistory");
                });

            modelBuilder.Entity("EdenClinic.Models.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CenterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gander")
                        .HasColumnType("int");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<string>("PersonAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PersonJob")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PersonState")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StrBirthdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PersonID");

                    b.HasIndex("CenterID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("RoleID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EdenClinic.Models.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("DiagnosisID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalProcedureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReservationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DiagnosisID");

                    b.HasIndex("MedicalProcedureID");

                    b.HasIndex("ReservationID");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("EdenClinic.Models.PrescriptionDetail", b =>
                {
                    b.Property<Guid>("PrescriptionDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("Count")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<byte?>("DaysCount")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("DiseaseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Dosage")
                        .HasColumnType("float");

                    b.Property<Guid?>("DrugID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PrescriptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionDetailID");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("DrugID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("TreatmentID");

                    b.ToTable("PrescriptionDetail");
                });

            modelBuilder.Entity("EdenClinic.Models.Remark", b =>
                {
                    b.Property<Guid>("RemarkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RemarkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RemarkID");

                    b.HasIndex("UserID");

                    b.ToTable("Remark");
                });

            modelBuilder.Entity("EdenClinic.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<double>("DiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConsulting")
                        .HasColumnType("bit");

                    b.Property<double>("Net")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Paied")
                        .HasColumnType("float");

                    b.Property<int>("PatientDetectingState")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rest")
                        .HasColumnType("float");

                    b.Property<Guid?>("SpecialistID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StrReservationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<double>("Vat")
                        .HasColumnType("float");

                    b.HasKey("ReservationID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("SpecialistID");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("EdenClinic.Models.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("EdenClinic.Models.RolePage", b =>
                {
                    b.Property<Guid>("RolePageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolePageID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePage");
                });

            modelBuilder.Entity("EdenClinic.Models.Specialist", b =>
                {
                    b.Property<Guid>("SpecialistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SpecialistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SpecialistID");

                    b.ToTable("Specialist");
                });

            modelBuilder.Entity("EdenClinic.Models.SystemAction", b =>
                {
                    b.Property<Guid>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ActionID");

                    b.HasIndex("PersonID");

                    b.ToTable("SystemAction");
                });

            modelBuilder.Entity("EdenClinic.Models.TestTemplate", b =>
                {
                    b.Property<Guid>("TestTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TestTemplateID");

                    b.ToTable("TestTemplate");
                });

            modelBuilder.Entity("EdenClinic.Models.TestTemplateDetail", b =>
                {
                    b.Property<Guid>("TestTemplateDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TestItemName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TestItemNormal")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TestItemUnit")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("TestTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TestTemplateDetailID");

                    b.HasIndex("TestTemplateID");

                    b.ToTable("TestTemplateDetail");
                });

            modelBuilder.Entity("EdenClinic.Models.Treasury", b =>
                {
                    b.Property<Guid>("TreasuryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("ClinicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TreasuryID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("PersonID");

                    b.ToTable("Treasury");
                });

            modelBuilder.Entity("EdenClinic.Models.Treatment", b =>
                {
                    b.Property<Guid>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreatmentCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TreatmentName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("TreatmentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TreatmentID");

                    b.HasIndex("TreatmentCategoryID");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("EdenClinic.Models.TreatmentCategory", b =>
                {
                    b.Property<Guid>("TreatmentCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TreatmentCategoryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("TreatmentCategoryID");

                    b.ToTable("TreatmentCategory");
                });

            modelBuilder.Entity("EdenClinic.Models.WorkingSheet", b =>
                {
                    b.Property<Guid>("SheetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasMaxLength(10);

                    b.Property<Guid?>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SheetDate")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("SheetDay")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasMaxLength(10);

                    b.HasKey("SheetID");

                    b.HasIndex("PersonID");

                    b.ToTable("WorkingSheet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EdenClinic.Models.Clinic", b =>
                {
                    b.HasOne("EdenClinic.Models.Center", "Center")
                        .WithMany("Clinics")
                        .HasForeignKey("CenterID");

                    b.HasOne("EdenClinic.Models.Specialist", "Specialist")
                        .WithMany("Clinics")
                        .HasForeignKey("SpecialistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdenClinic.Models.ClinicalHistory", b =>
                {
                    b.HasOne("EdenClinic.Models.Reservation", "Reservation")
                        .WithMany("ClinicalHistories")
                        .HasForeignKey("ReservationID");
                });

            modelBuilder.Entity("EdenClinic.Models.Disease", b =>
                {
                    b.HasOne("EdenClinic.Models.Clinic", "Clinic")
                        .WithMany("Diseases")
                        .HasForeignKey("ClinicID");

                    b.HasOne("EdenClinic.Models.DiseaseCategory", "DiseasesCategory")
                        .WithMany("Diseases")
                        .HasForeignKey("DiseaseCategoryID");
                });

            modelBuilder.Entity("EdenClinic.Models.DoctorSetting", b =>
                {
                    b.HasOne("EdenClinic.Models.Person", "Doctor")
                        .WithMany("DoctorSetting")
                        .HasForeignKey("DoctorID");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalHistory", b =>
                {
                    b.HasOne("EdenClinic.Models.MedicalHistoryCaption", "MedicalHistoryCaptions")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("MedicalHistoryCaptionsCaptionID");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalTest", b =>
                {
                    b.HasOne("EdenClinic.Models.Person", "Patient")
                        .WithMany("PatientMedicalTests")
                        .HasForeignKey("PatientID");

                    b.HasOne("EdenClinic.Models.TestTemplate", "TestsTemplate")
                        .WithMany("MedicalTests")
                        .HasForeignKey("TestTemplateID");
                });

            modelBuilder.Entity("EdenClinic.Models.MedicalTestsDetail", b =>
                {
                    b.HasOne("EdenClinic.Models.MedicalTest", "MedicalTest")
                        .WithMany("MedicalTestsDetails")
                        .HasForeignKey("MedicalTestID");

                    b.HasOne("EdenClinic.Models.TestTemplateDetail", "TestTemplateDetail")
                        .WithMany("MedicalTestsDetails")
                        .HasForeignKey("TestTemplateDetailID");
                });

            modelBuilder.Entity("EdenClinic.Models.PatientInfo", b =>
                {
                    b.HasOne("EdenClinic.Models.Person", "Person")
                        .WithOne("PatientInfo")
                        .HasForeignKey("EdenClinic.Models.PatientInfo", "PersonID");
                });

            modelBuilder.Entity("EdenClinic.Models.PatientMedicalHistory", b =>
                {
                    b.HasOne("EdenClinic.Models.MedicalHistory", "MedicalHistory")
                        .WithMany("PatientMedicalHistories")
                        .HasForeignKey("MedicalHistoryID");

                    b.HasOne("EdenClinic.Models.Person", "Patient")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("EdenClinic.Models.Person", b =>
                {
                    b.HasOne("EdenClinic.Models.Center", "Center")
                        .WithMany("Persons")
                        .HasForeignKey("CenterID");

                    b.HasOne("EdenClinic.Models.Clinic", "Clinic")
                        .WithMany("Persons")
                        .HasForeignKey("ClinicID");

                    b.HasOne("EdenClinic.Models.Role", "Role")
                        .WithMany("Persons")
                        .HasForeignKey("RoleID");
                });

            modelBuilder.Entity("EdenClinic.Models.Prescription", b =>
                {
                    b.HasOne("EdenClinic.Models.Diagnosis", "Diagnosis")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DiagnosisID");

                    b.HasOne("EdenClinic.Models.MedicalProcedure", "MedicalProcedure")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalProcedureID");

                    b.HasOne("EdenClinic.Models.Reservation", "Reservation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ReservationID");
                });

            modelBuilder.Entity("EdenClinic.Models.PrescriptionDetail", b =>
                {
                    b.HasOne("EdenClinic.Models.Disease", "Disease")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("DiseaseID");

                    b.HasOne("EdenClinic.Models.Drug", "Drug")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("DrugID");

                    b.HasOne("EdenClinic.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("PrescriptionID");

                    b.HasOne("EdenClinic.Models.Treatment", "Treatment")
                        .WithMany("PrescriptionDetails")
                        .HasForeignKey("TreatmentID");
                });

            modelBuilder.Entity("EdenClinic.Models.Remark", b =>
                {
                    b.HasOne("EdenClinic.Models.Person", "Person")
                        .WithMany("Remarks")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("EdenClinic.Models.Reservation", b =>
                {
                    b.HasOne("EdenClinic.Models.Clinic", "Clinic")
                        .WithMany("Reservations")
                        .HasForeignKey("ClinicID");

                    b.HasOne("EdenClinic.Models.Person", "Doctor")
                        .WithMany("DoctorReservations")
                        .HasForeignKey("DoctorID");

                    b.HasOne("EdenClinic.Models.Person", "Patient")
                        .WithMany("PatientReservations")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EdenClinic.Models.Specialist", "Specialist")
                        .WithMany("Reservations")
                        .HasForeignKey("SpecialistID");
                });

            modelBuilder.Entity("EdenClinic.Models.RolePage", b =>
                {
                    b.HasOne("EdenClinic.Models.Role", "Role")
                        .WithMany("RolePages")
                        .HasForeignKey("RoleID");
                });

            modelBuilder.Entity("EdenClinic.Models.SystemAction", b =>
                {
                    b.HasOne("EdenClinic.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("EdenClinic.Models.TestTemplateDetail", b =>
                {
                    b.HasOne("EdenClinic.Models.TestTemplate", "TestsTemplate")
                        .WithMany("TestTemplateDetails")
                        .HasForeignKey("TestTemplateID");
                });

            modelBuilder.Entity("EdenClinic.Models.Treasury", b =>
                {
                    b.HasOne("EdenClinic.Models.Clinic", "Clinic")
                        .WithMany("Treasuries")
                        .HasForeignKey("ClinicID");

                    b.HasOne("EdenClinic.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("EdenClinic.Models.Treatment", b =>
                {
                    b.HasOne("EdenClinic.Models.TreatmentCategory", "TreatmentCategory")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentCategoryID");
                });

            modelBuilder.Entity("EdenClinic.Models.WorkingSheet", b =>
                {
                    b.HasOne("EdenClinic.Models.Person", "Person")
                        .WithMany("WorkingSheets")
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
