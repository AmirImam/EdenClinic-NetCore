@inherits LayoutComponentBase
@inject SessionManager Session;
@inject SharedTools Tools;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject NavigationManager UriHelper;
@if (rendered == false)
{

    <div style="width:100%;height:100%;position:fixed;top:0px;left:0px;text-align:center;">
        <img src="assets/LoadingBg.gif" />
    </div>

}
else
{
    if (Session.Me == null)
    {
        <Login />
    }
    else
    {


        <MatDrawerContainer Style="width: 100vw; height: 100vh;">
            <MatDrawer @bind-Opened="@Opened">
                <!--<div class="user-profile" style=" padding-left: 15px; padding-top: 15px;height: 160px; background: url(https://wrappixel.com/demos/angular-admin-templates/material-angular-lite/angular/assets/images/background/user-info.jpg) no-repeat;">
                    <div class="profile-img">
                        <PersonImage Style="width:80px;" PersonID="Session.Me.PersonID" />
                    </div>
                    <div class="profile-text"><a aria-haspopup="true" class="mat-menu-trigger" style="font-weight:bolder;"> @Session.Me.PersonName <i class="ti-angle-down font-12 m-l-5"></i></a>-->
                <!---->
                <!--</div>
                </div>-->
                <Sidebar />

            </MatDrawer>
            <MatDrawerContent Style="height:100%;">
                <MatAppBarContainer Style="height:100%;">
                    <MatAppBar Fixed="false">
                        <MatAppBarRow Style="color: #73879c; float: left; background-color: #EDEDED !important; border-bottom: 1px solid #D9DEE4; width: 100%; position: relative;">
                            <MatAppBarSection Style="background-color: #EDEDED !important;">
                                <MatIconButton Style="font-weight:bolder;" Icon="@MatIconNames.Menu" OnClick="@((e) => ButtonClicked())"></MatIconButton>
                                <LogoutButton />
                            </MatAppBarSection>
                            <MatAppBarSection Align="@MatAppBarSectionAlign.Start">
                                <MatButton Icon="@MatIconNames.Notifications" OnClick="@(()=> this.Menu2.OpenAsync(Button2.Ref))" @ref="Button2"></MatButton>
                                <MatMenu @ref="Menu2">
                                    <MatList>
                                        <MatListItem>Item 1</MatListItem>
                                        <MatListItem>Item 2</MatListItem>
                                        <MatListItem>Item 3</MatListItem>
                                        <MatListItem>Item 4</MatListItem>
                                        <MatListItem>Item 5</MatListItem>
                                    </MatList>
                                </MatMenu>
                            </MatAppBarSection>
                        </MatAppBarRow>
                    </MatAppBar>

                    <MatAppBarContent>
                        <div class="demo-mat-elevation-container" style="background-color:#fafafa;height:100%;padding:5px;">
                            <div class="mat-elevation-z9" style="padding: 20px;height:100%;">
                                <div class="container">
                                    @Body
                                </div>
                            </div>
                        </div>
                    </MatAppBarContent>
                </MatAppBarContainer>

            </MatDrawerContent>
        </MatDrawerContainer>

    }
}
@if (Session.IsBusy == true)
{
    <div style="position:fixed;top:0px;left:0px;width:100%;height:100%;z-index:9999;background-color:transparent;">
        <MatProgressBar Indeterminate="true" />
        <div style="position: fixed; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 9999;opacity:0.3;background-color:#8c1cef"></div>
    </div>
}
<MatToastContainer />

@code
{
    bool Opened = true;
    BaseMatButton Button2;
    BaseMatMenu Menu2;
    bool rendered = false;
    protected override void OnInitialized()
    {
        Session.UpdateMainLayout = StateHasChanged;
    }
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender == true)
        {
            var sesData = await Tools.SessionStorage.GetItemAsync<string>("sesref");
            if (sesData != null)
            {
                string json = sesData.Decrypt(SharedTools.StorageEncryptionKey);
                Person person = json.ToJsonObject<Person>();
                Session.Me = person;

            }
            rendered = true;
            StateHasChanged();
        }
    }
    void ButtonClicked()
    {
        Opened = !Opened;
    }

}